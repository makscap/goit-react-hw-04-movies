{"version":3,"sources":["components/MovieReviews/MovieReviews.module.css","components/MovieReviews/MovieReviews.jsx"],"names":["module","exports","Status","MovieReviews","id","useState","reviews","setReviews","status","setStatus","error","setError","useEffect","moviesAPI","getMovieReviews","then","data","console","log","results","length","Error","catch","Loader","className","s","list","map","review","item","author","text","content","style","fontFamily","message"],"mappings":"4HACAA,EAAOC,QAAU,CAAC,KAAO,2BAA2B,OAAS,6BAA6B,KAAO,6B,0ICK3FC,EACE,OADFA,EAEK,UAFLA,EAGM,WAHNA,EAIM,WAGG,SAASC,EAAT,GAA+B,IAAPC,EAAM,EAANA,GAAM,EACbC,mBAAS,MADI,mBACpCC,EADoC,KAC3BC,EAD2B,OAEfF,mBAASH,GAFM,mBAEpCM,EAFoC,KAE5BC,EAF4B,OAGjBJ,mBAAS,MAHQ,mBAGpCK,EAHoC,KAG7BC,EAH6B,KAuB3C,OAlBAC,qBAAU,WACRH,EAAUP,GACVW,IACGC,gBAAgBV,GAChBW,MAAK,SAAAC,GAEJ,GADAC,QAAQC,IAAIF,EAAKG,SACW,IAAxBH,EAAKG,QAAQC,OACf,MAAM,IAAIC,MAAM,4CAElBd,EAAWS,EAAKG,SAChBV,EAAUP,MAEXoB,OAAM,SAAAZ,GACLC,EAASD,GACTD,EAAUP,QAEb,CAACE,IAGF,qCACGI,IAAWN,GAAkB,cAACqB,EAAA,EAAD,IAC7Bf,IAAWN,GACV,oBAAIsB,UAAWC,IAAEC,KAAjB,SACGpB,EAAQqB,KAAI,SAAAC,GACX,OACE,qBAAIJ,UAAWC,IAAEI,KAAjB,UACE,mBAAGL,UAAWC,IAAEK,OAAhB,SAAyBF,EAAOE,SAChC,mBAAGN,UAAWC,IAAEM,KAAhB,SAAuBH,EAAOI,YAFJJ,EAAOxB,SAQ1CI,IAAWN,GACV,mBAAG+B,MAAO,CAAEC,WAAY,sBAAxB,SAAiDxB,EAAMyB","file":"static/js/movie-reviews.a5dc470a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"MovieReviews_list__3qx8o\",\"author\":\"MovieReviews_author__16-4a\",\"text\":\"MovieReviews_text__1gzrc\"};","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport moviesAPI from '../../services/movies-api';\nimport Loader from '../Loader';\nimport s from './MovieReviews.module.css';\n\nconst Status = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n\nexport default function MovieReviews({ id }) {\n  const [reviews, setReviews] = useState(null);\n  const [status, setStatus] = useState(Status.IDLE);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setStatus(Status.PENDING);\n    moviesAPI\n      .getMovieReviews(id)\n      .then(data => {\n        console.log(data.results);\n        if (data.results.length === 0) {\n          throw new Error(\"We don't have any reviews for this movie\");\n        }\n        setReviews(data.results);\n        setStatus(Status.RESOLVED);\n      })\n      .catch(error => {\n        setError(error);\n        setStatus(Status.REJECTED);\n      });\n  }, [id]);\n\n  return (\n    <>\n      {status === Status.PENDING && <Loader />}\n      {status === Status.RESOLVED && (\n        <ul className={s.list}>\n          {reviews.map(review => {\n            return (\n              <li className={s.item} key={review.id}>\n                <p className={s.author}>{review.author}</p>\n                <p className={s.text}>{review.content}</p>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n      {status === Status.REJECTED && (\n        <p style={{ fontFamily: 'Roboto, sans-serif' }}>{error.message}</p>\n      )}\n    </>\n  );\n}\n\nMovieReviews.propTypes = {\n  id: PropTypes.number.isRequired,\n};"],"sourceRoot":""}